daml 1.2
module DA.Tectoro.C2BTrade where

import DA.Tectoro.Facts
import DA.Tectoro.B2EAgree
import DA.Date()
import DA.List()
import DA.Optional()


type TradeId = ContractId Trade

template TradeMaster
  with
    broker: Party
    commissionRate: Decimal
    typeOfTrade: Text
  where
    signatory broker

    controller broker can
             Invite : ContractId TradeIssueProposal
              with client: Party
              do create TradeIssueProposal
                   with tradeAgreement = TradeIssueAgreement with broker; client; commissionRate; typeOfTrade

template TradeIssueProposal
  with
    tradeAgreement: TradeIssueAgreement
  where
    signatory tradeAgreement.broker

    controller tradeAgreement.client can
      AcceptTradeProposal
        : ContractId TradeIssueAgreement
        do create tradeAgreement
template TradeIssueAgreement
  with
    broker: Party
    client: Party
    commissionRate: Decimal
    typeOfTrade: Text
  where
     signatory broker, client
     controller client can
       nonconsuming Order : ContractId TradeProposal 
         with terms: OrderTerms
          do create TradeProposal with terms; broker,client; regulator = terms.regulator

template TradeProposal
  with
    terms: OrderTerms
    broker: Party
    client: Party
    regulator: Party
    
  where
    signatory client, broker
    observer regulator
    controller broker can
       Accept : ContractId Trade
        with tradeId: Text
        do
           create Trade with tradeId; terms; broker; client;regulator
       Reject : ()
        do return ()

template Trade
  with
    tradeId: Text
    terms: OrderTerms
    broker: Party
    client: Party
    regulator: Party
  where
    signatory broker
    observer  regulator
    controller broker can
             Transfer_orderForExchange : ContractId FinalTrade
              do 
              fetchedTrade <- fetchByKey @BrokerTradeIssueAgreement terms.exchange
              create FinalTrade with tradeId; terms; broker; regulator; client

template FinalTrade
   with
    broker: Party
    client:Party
    regulator: Party
    tradeId: Text
    terms: OrderTerms
  where
    signatory broker
    observer regulator
    controller terms.exchange can
          nonconsuming Execute:ContractId TradeExecuted
           with exchangeId: Text
              do
             create TradeExecuted with client; broker; regulator; exchange = terms.exchange; exchangeId;orderId = terms.orderId; operation = terms.operation; tradeId; openQty = "0";filledQty = terms.qty; status = "Trade Execution Completed"
                                       
template TradeExecuted
   with
     broker: Party
     regulator: Party
     exchange: Party
     tradeId: Text
     openQty: Text
     filledQty: Int
     status: Text
     orderId: Text
     operation: Text
     client: Party
     exchangeId: Text

    where
     signatory broker,exchange
     observer exchange, regulator, client